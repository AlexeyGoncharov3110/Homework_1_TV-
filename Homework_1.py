# ЗАДАЧА 1
# Из колоды в 52 карты извлекаются случайным образом 4 карты. 
# a) Найти вероятность того, что все карты – крести.
# б) Найти вероятность, что среди 4-х карт окажется хотя бы один туз.
import numpy as np
from math import factorial
#а) Найдём кол-во карт с мастью -крести 
k=52//4
# Кол-во карт с мастью крести равно 13 
# Теперь находим кол-во сочетаний , которыми можно взять 4 карты крести из 13
def combinations(n,k):
    return factorial(n)//(factorial(k)*factorial(n-k))
kr=(combinations(13,4))
# кол-во сочетаний равно 715 и это и будет кол-во благоприятствующих исходов
# Теперь находим общее кол-во сочетаний , которыми можно взять 4 карты из 52 карт 
def all_combinations(n,k):
    return factorial(n)//(factorial(k)*factorial(n-k))
all=(all_combinations(52,4))
# Общее кол-во сочетаний равно 270725 
# Теперь найдём вероятность что все 4 карты крести :
p=kr/all*100
print(f'1.а)Вероятность того ,что все 4 карты крести равна {round(p,3)}%') #вероятность равна 0,264%
# б) Найдём вероятность того, что хотябы одна карта из 4 - туз:
# Для этого найдём кол-во сочетаний разного кол-ва тузов из 4-х карт, каждое кол-во сочетаний
# для 1,2,3 и 4 -х разделим на кол-во всех сочетаний и сложим 
def ace_probability():
    n= (factorial(52)//(factorial(4)*factorial(52-4))) # общее кол-во сочетаний из любых 4 карт в колоде 
    p1= (factorial(4) // (factorial(1)*factorial(4 - 1))) * (factorial(48) // (factorial(3)*factorial(48 - 3)))/n #кол-во сочетаний из 4 карт , где 1 туз и 3 не туза
    p2= (factorial(4) // (factorial(2)*factorial(4 - 2))) * (factorial(48) // (factorial(2)*factorial(48 - 2)))/n #кол-во сочетаний из 4 карт , где 2 туз и 2 не туза
    p3= (factorial(4) // (factorial(3)*factorial(4 - 3))) * (factorial(48) // (factorial(1)*factorial(48 - 1)))/n #кол-во сочетаний из 4 карт , где 3 туз и 1 не туз
    p4= (factorial(4) // factorial(4)*factorial(4-4))/n #кол-во сочетаний из 4 карт , где 4 туза
    return (round((p1+p2+p3+p4)*100,2)) #складываем вероятности

print(f'1.б)Вероятность того ,что среди 4-х карт хотябы один туз равна {ace_probability()}%') #вероятность равна 28,1%


# ЗАДАЧА 2 

# На входной двери подъезда установлен кодовый замок,
# содержащий десять кнопок с цифрами от 0 до 9. 
# Код содержит три цифры, которые нужно нажать одновременно. 
# Какова вероятность того, что человек, не знающий код, 
# откроет дверь с первой попытки?

#Найдём общее кол-во исходов по формуле сочетаний: 
def combinations(m,n):
    return factorial(n)//(factorial(m)*factorial(n-m))

p=1/combinations(3,10)*100
print(f'2.Вероятность того ,что дверь будет открыта с первой попытки равна {round(p,2)}%')
#ЗАДАЧА 3
# В ящике имеется 15 деталей, из которых 9 окрашены. 
# Рабочий случайным образом извлекает 3 детали.
# Какова вероятность того, что все извлеченные детали окрашены?
def three_colored_balls(m,l,n): #
    return (factorial(l)//(factorial(m)*factorial(l-m)))/(factorial(n)//(factorial(m)*factorial(n-m)))
#Находим кол-во сочетаний кот-м мы можем извлечь 3 окрашенных детали из 9-ти
#Затем находим общее кол-во сочетанийй кот-м можем извлечь 3 детали из 15 
#Делим первое кол-во сочетаний на второе(общее)
p=three_colored_balls(3,9,15)
print(f'3.Вероятность того ,что все извлеч детали окрашенны равна {round(p,2)}%') 
 
#ЗАДАЧА 4
# В лотерее 100 билетов. Из них 2 выигрышных.
# Какова вероятность того, что 2 приобретенных билета окажутся выигрышными?

# Находим общее кол-во сочетаний 2 билетов из 100:
# Затем делим 1 ( благоприятный исход - комбинация из двух выигрышных билетов) на общее
# кол-во исходов

def two_winning_tickets(m,n):
    return factorial(n)//(factorial(m)*factorial(n-m))

p=1/two_winning_tickets(2,100)*100
print(f'4.Вероятность того ,что 2 приобретённых билета окажутся выигрышными равна {round(p,5)}%')